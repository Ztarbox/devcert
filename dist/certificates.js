"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assert = require("assert");
const createDebug = require("debug");
const fs_1 = require("fs");
const mkdirp_1 = require("mkdirp");
const certificate_authority_1 = require("./certificate-authority");
const constants_1 = require("./constants");
const utils_1 = require("./utils");
const debug = createDebug('devcert:certificates');
/**
 * Generate a domain certificate signed by the devcert root CA. Domain
 * certificates are cached in their own directories under
 * CONFIG_ROOT/domains/<domain>, and reused on subsequent requests. Because the
 * individual domain certificates are signed by the devcert root CA (which was
 * added to the OS/browser trust stores), they are trusted.
 */
async function generateDomainCertificate(commonName, alternativeNames, certOptions) {
    mkdirp_1.sync(utils_1.pathForDomain(commonName));
    debug(`Generating private key for ${commonName}`);
    const domainKeyPath = utils_1.pathForDomain(commonName, 'private-key.key');
    generateKey(domainKeyPath);
    debug(`Generating certificate signing request for ${commonName}`);
    const csrFile = utils_1.pathForDomain(commonName, `certificate-signing-request.csr`);
    await constants_1.withDomainSigningRequestConfig(commonName, { alternativeNames }, configpath => {
        utils_1.openssl(`req -new -config "${configpath}" -key "${domainKeyPath}" -out "${csrFile}" -days ${certOptions.domainCertExpiry}`, `generating CSR for ${commonName}`);
    });
    debug(`Generating certificate for ${commonName} from signing request and signing with root CA`);
    const domainCertPath = utils_1.pathForDomain(commonName, `certificate.crt`);
    await certificate_authority_1.withCertificateAuthorityCredentials(async ({ caKeyPath, caCertPath }) => {
        await constants_1.withDomainCertificateConfig(commonName, alternativeNames, domainCertConfigPath => {
            utils_1.openssl(`ca -config "${domainCertConfigPath}" -in "${csrFile}" -out "${domainCertPath}" -keyfile "${caKeyPath}" -cert "${caCertPath}" -days ${certOptions.domainCertExpiry} -batch`, `signing cert for ${commonName} with root ca`);
        });
    });
}
exports.generateDomainCertificate = generateDomainCertificate;
function isFile(pth) {
    return fs_1.statSync(pth).isFile();
}
/**
 * Revokes a domain certificate signed by the devcert root CA and deletes it.
 */
async function revokeDomainCertificate(commonName) {
    debug(`Revoking certificate for ${commonName}`);
    const domainCertPath = utils_1.certPathForDomain(commonName);
    assert(fs_1.existsSync(domainCertPath), 'domainCertPath must exist');
    assert(isFile(domainCertPath), 'domainCertPath must be a file');
    debug('domainCertPath', domainCertPath);
    assert(fs_1.readFileSync(domainCertPath).toString().length > 0, 'domainCert must be non-empty');
    await certificate_authority_1.withCertificateAuthorityCredentials(async ({ caKeyPath, caCertPath }) => {
        debug('caKeyPath', caKeyPath);
        debug('caCertPath', caCertPath);
        assert(fs_1.existsSync(caCertPath), 'ca cert must exist');
        assert(isFile(caCertPath), 'ca cert must be a file');
        assert(fs_1.existsSync(caKeyPath), 'ca key must exist');
        assert(isFile(caKeyPath), 'ca key must be a file');
        await constants_1.withDomainCertificateConfig(commonName, [], domainCertConfigPath => {
            assert(fs_1.existsSync(domainCertConfigPath), 'domainCertConfigPath must exist');
            assert(isFile(domainCertConfigPath), 'domainCertConfigPath must be a file');
            utils_1.openssl(`ca -config "${domainCertConfigPath}" -revoke "${domainCertPath}" -keyfile "${caKeyPath}" -cert "${caCertPath}"`, `revoking domain certificate for ${commonName}`);
        });
    }).catch(err => {
        throw new Error(`Problem revoking certificate\n${err}`);
    });
}
exports.revokeDomainCertificate = revokeDomainCertificate;
// Generate a cryptographic key, used to sign certificates or certificate signing requests.
function generateKey(filename) {
    debug(`generateKey: ${filename}`);
    utils_1.openssl(`genrsa -out "${filename}" 2048`, 'generating RSA key');
    fs_1.chmodSync(filename, 400);
}
exports.generateKey = generateKey;
//# sourceMappingURL=data:application/json;base64,