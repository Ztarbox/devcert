"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const child_process_1 = require("child_process");
const tmp = require("tmp");
const createDebug = require("debug");
const path = require("path");
const sudo_prompt_1 = require("sudo-prompt");
const execa = require("execa");
const assert = require("assert");
const chalk = require("chalk");
const constants_1 = require("./constants");
const fs_1 = require("fs");
const debug = createDebug('devcert:util');
function openssl(cmd, description) {
    try {
        return run(`openssl ${cmd}`, {
            stdio: 'pipe',
            env: Object.assign({
                RANDFILE: path.join(constants_1.configPath('.rnd'))
            }, process.env)
        }).toString();
    }
    catch (err) {
        throw new Error(`OpenSSL errored while performing: ${description}\n${err}`);
    }
}
exports.openssl = openssl;
function run(cmd, options = {}) {
    debug(`exec: ${chalk.yellowBright(cmd)}`);
    return child_process_1.execSync(cmd, options).toString();
}
exports.run = run;
function waitForUser() {
    return new Promise(resolve => {
        process.stdin.resume();
        process.stdin.on('data', resolve);
    });
}
exports.waitForUser = waitForUser;
function reportableError(message) {
    return new Error(`${message} | This is a bug in devcert, please report the issue at https://github.com/davewasmer/devcert/issues`);
}
exports.reportableError = reportableError;
function tmpDir() {
    // discardDescriptor because windows complains the file is in use if we create a tmp file
    // and then shell out to a process that tries to use it
    return tmp.dirSync({ discardDescriptor: true });
}
exports.tmpDir = tmpDir;
function sudo(cmd) {
    return new Promise((resolve, reject) => {
        sudo_prompt_1.default.exec(cmd, { name: 'devcert' }, (err, stdout, stderr) => {
            const error = err ||
                (typeof stderr === 'string' &&
                    stderr.trim().length > 0 &&
                    new Error(stderr));
            error ? reject(error) : resolve(stdout);
        });
    });
}
exports.sudo = sudo;
function hasSudo() {
    try {
        execa.shellSync('sudo -n true');
        return true;
    }
    catch (e) {
        if (!(e && e.stderr.trim() === 'sudo: a password is required'))
            throw new Error(`Unexpected error while trying to detect sudo elevation: ${e}`);
        return false;
    }
}
exports.hasSudo = hasSudo;
function pathForDomain(domain, ...pathSegments) {
    assert(typeof constants_1.domainsDir === 'string', 'domainsDir must be a string');
    assert(constants_1.domainsDir.length > 0, 'domainsDir must be > 0 length');
    return path.join(constants_1.domainsDir, domain, ...pathSegments);
}
exports.pathForDomain = pathForDomain;
function certPathForDomain(commonName) {
    assert(typeof commonName === 'string', 'commonName must be a string');
    assert(commonName.length > 0, 'commonName must be > 0 length');
    return pathForDomain(commonName, `certificate.crt`);
}
exports.certPathForDomain = certPathForDomain;
function keyPathForDomain(commonName) {
    assert(typeof commonName === 'string', 'commonName must be a string');
    assert(commonName.length > 0, 'commonName must be > 0 length');
    return pathForDomain(commonName, `private-key.key`);
}
exports.keyPathForDomain = keyPathForDomain;
function hasCertificateFor(commonName) {
    assert(typeof commonName === 'string', 'commonName must be a string');
    assert(commonName.length > 0, 'commonName must be > 0 length');
    return fs_1.existsSync(certPathForDomain(commonName));
}
exports.hasCertificateFor = hasCertificateFor;
//# sourceMappingURL=data:application/json;base64,